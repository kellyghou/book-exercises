list <- list("hi", "there", "you", "over", "there")
list[[1]]
list[1]
list[1, 2]
list[[1, 2]]
list[c(1, 2)]
vector <- c(1, 2, 3, 4)
vector[1, 2]
vector[1]
vector[c(1, 2)]
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
print(salaries)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries_2018 <- c(salaries_2017 + adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- c(salaries_2017 + adjustments)
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- c(adjustments > 0)
print(salaries)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- c(salaries$salaries_2017 + salaries$adjustments)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- c(salaries$adjustments > 0)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$adjustments > 0
# How many employees got a raise?
length(salaries[, salaries$raise == TRUE])
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$adjustments > 0
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max()]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), ]
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE, ])
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
print(salaries[salaries$raise == TRUE, ])
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
# What was the dollar value of the highest raise?
max(salaries$adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringAsFactors = FALSE)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
source('C:/Users/jiehou/Desktop/Info201/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringAsFactors = FALSE)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringAsFactor = FALSE)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringAsFactors = FALSE)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE, ])
# What was the dollar value of the highest raise?
max(salaries$adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
salaries[min(salaries$raise), "raise"]
# What was the largest decrease in salaries between the two years?
salaries["raise" == min("raise"), "raise"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$raise == min(salaries$raise), salaries$raise]
# What was the largest decrease in salaries between the two years?
salaries[salaries$raise == min(salaries$raise), "raise"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$adjustments == min(salaries$adjustments), "adjustments"]
paycut <- salaries[salaries$raise == FALSE, ]
mean(paycut$adjustments)
paycut <- salaries[salaries$raise == FALSE, "adjustments"]
mean(paycut)
testvector <- 1:10
class(testvector)
print(testvector)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(category) %>%
summarize(count = sum(category))
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(category) %>%
summarize(count = sum(category_counts))
# load dplyr package
library("dplyr")
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(category) %>%
summarize(count = sum(category_counts))
# As always, the first thing you'll need to do is to load the data into R (using the read.csv() function),
# saving it as a variable with an appropriate name
projects_df <- read.csv("https://canvas.uw.edu/courses/1355751/files/61486325/download", stringsAsFactors = FALSE)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(category) %>%
nrow()
View(projects_df)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(category) %>%
nrow()
print(category_counts)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(category)
print(category_counts)
View(category_counts)
View(group_by(projects_df))
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(category)
View(category_counts)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(main_category)
print(category_counts)
group_by(projects_df, category)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
select(category)
print(category_counts)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
select(category) %>%
group_by(category)
print(category_counts)
print(category)
print(category_counts)
group_by(flights, dest)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
group_by(flights, dest)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(category)
print(category_counts)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df %>%
group_by(state)
print(category_counts)
# How much activity—in terms of backers and money pledged—did Kickstarter have for each year in the data set? Products
# should be classified by their launch year. Store your answer as a data frame with 3 columns (year, total_backers,
# and total_pledged) and one row for each year, in a variable called popularity_by_year. Answer: Includes 2009: 43758
# backers, 2845501 pledged .... Hint your calculation can include mutating the data frame to give it a year column that
# is the first 4 characters of the launched date.
View(projects_df)
# How many projects have been posted in each category? Store your answer as a data frame with 2 columns
# (category and count) and 1 row per project, in a variable category_counts. This data frame must also be ordered
# by descending count (so the most common category is first).
category_counts <- projects_df_with_factors %>%
group_by(state)
# How much activity—in terms of backers and money pledged—did Kickstarter have for each year in the data set? Products
# should be classified by their launch year. Store your answer as a data frame with 3 columns (year, total_backers,
# and total_pledged) and one row for each year, in a variable called popularity_by_year. Answer: Includes 2009: 43758
# backers, 2845501 pledged .... Hint your calculation can include mutating the data frame to give it a year column that
# is the first 4 characters of the launched date.
activity_per_year <- projects_df %>%
mutate(year = substr(launched, 1, 4))
View(activity_per_year)
# How much activity—in terms of backers and money pledged—did Kickstarter have for each year in the data set? Products
# should be classified by their launch year. Store your answer as a data frame with 3 columns (year, total_backers,
# and total_pledged) and one row for each year, in a variable called popularity_by_year. Answer: Includes 2009: 43758
# backers, 2845501 pledged .... Hint your calculation can include mutating the data frame to give it a year column that
# is the first 4 characters of the launched date.
activity_per_year <- projects_df %>%
mutate(year = substr(launched, 1, 4)) %>%
group_by(year)
View(activity_per_year)
install.packages("ggplot2")
library("ggplot2")
library("dplyr")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
?sample_n
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
?geom_point
?aes
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = carat, size = price))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample, x = carat, y = price) +
geom_point(alpha = 0.3) +
geom_smooth(y = cut)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample, x = carat, y = price) +
geom_point(alpha = 0.3) +
geom_smooth(mapping = aes(color = cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample, x = carat, y = price) +
geom_point(alpha = 0.3)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price)) +
geom_point(alpha = 0.3) +
geom_smooth(mapping = aes(color = cut))
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, price = y))
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = logarithmic(price)))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_logarithmic()
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds_sample) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price)) +
geom_bin2d()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price)) +
geom_bin2d() +
scale_x_log10() +
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price)) +
geom_point(color = clarity)
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price, color = clarity)) +
geom_point()
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price, color = clarity)) +
geom_point(color = "PuOr")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price, color = clarity)) +
geom_point() +
scale_color_brewer(palette = "Set3")
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds_sample, mapping = aes(x = carat, y = price, color = clarity)) +
geom_point() +
scale_color_brewer(palette = "Purples")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample, mapping = aes(x = price, y = cut, fill = clarity)) +
geom_col()
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~color)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~cut)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~clarity)
install.packages("shiny")
library("shiny")
runApp('demo2.R')
runApp('demo2.R')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='kellyghou', token='F63A3BDC5B79832F19EFE4F9A163870B', secret='oT4VF+JDuMb7QRfyp3f+o+kNY9ZnfCl/1QZCFKV0')
?numericInput
shiny::runApp('Info201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Info201/book-exercises/chapter-19-exercises/exercise-2')
setwd("C:/Users/jiehou/Desktop/Info201/book-exercises/chapter-19-exercises/exercise-4")
runApp()
setwd("C:/Users/jiehou/Desktop/Info201/book-exercises/chapter-19-exercises/exercise-4")
runApp()
runApp()
# Load libraries so they are available
library("shiny")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
runApp()
